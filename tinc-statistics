#!/usr/bin/env -S jq -f
def mean: add / length;

def stdDev:
  mean as $the_mean
  | map(pow(. - $the_mean; 2))
  | add
  | sqrt;

def median:
  sort
  | if length == 0 then
      null
    elif length % 2 == 0 then
      (.[length/2] + .[length/2-1])/2
    else
      .[length/2|floor]
    end;

def statProperty(property):
  to_entries
  | map(select(.value | property))
  | max_by(.value | property) as $max
  | min_by(.value | property) as $min
  | {
    max: $max | .value | property,
    maxNode: $max | .key,
    min: $min | .value | property,
    minNode: $min | .key,
    mean: map(.value | property) | mean,
    median: map(.value | property) | median,
    stdDev: map(.value | property) | stdDev,
  };

. as $nodes
| {
  longitude: statProperty(.longitude),
  latitude: statProperty(.latitude),
  connections: statProperty(.to | length),
  weight:
    to_entries
    | map(
      .key as $source
      | .value.to
      | map({key: ($source + "â†’" + .name), value: .})
    )
    | flatten
    | from_entries
    | statProperty(.weight),
} as $statistics
| $statistics
| .superNodes |= (
  $nodes
  | map_values(select((.to | length) > $statistics.connections.mean))
  | keys
)
